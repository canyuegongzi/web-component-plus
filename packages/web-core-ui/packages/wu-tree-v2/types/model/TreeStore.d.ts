import { Node } from './Node';
export declare class TreeStore {
    currentNode: Node | null;
    currentNodeKey: string | null;
    nodesMap: Record<any, any>;
    root: Node;
    data: any;
    filterNodeMethod: any;
    key: any;
    checkStrictly: boolean;
    defaultCheckedKeys: any;
    defaultExpandedKeys: any;
    private lazy;
    private load;
    private autoExpandParent;
    constructor(options: any);
    filter(value: any): void;
    setData(newVal: any): void;
    getNode(data: any): any;
    insertBefore(data: any, refData: any): void;
    insertAfter(data: any, refData: any): void;
    remove(data: any): void;
    append(data: any, parentData: any): void;
    _initDefaultCheckedNodes(): void;
    _initDefaultCheckedNode(node: any): void;
    setDefaultCheckedKey(newVal: any): void;
    registerNode(node: any): void;
    deregisterNode(node: any): void;
    getCheckedNodes(leafOnly?: boolean, includeHalfChecked?: boolean): any[];
    getCheckedKeys(leafOnly?: boolean): any[];
    getHalfCheckedNodes(): any[];
    getHalfCheckedKeys(): any[];
    _getAllNodes(): any[];
    updateChildren(key: any, data: any): void;
    _setCheckedKeys(key: any, leafOnly: boolean, checkedKeys: any): void;
    setCheckedNodes(array: any, leafOnly?: boolean): void;
    setCheckedKeys(keys: any, leafOnly?: boolean): void;
    setDefaultExpandedKeys(keys: any): void;
    setChecked(data: any, checked: any, deep: any): void;
    getCurrentNode(): Node;
    setCurrentNode(currentNode: any): void;
    setUserCurrentNode(node: any): void;
    setCurrentNodeKey(key: any): void;
}
