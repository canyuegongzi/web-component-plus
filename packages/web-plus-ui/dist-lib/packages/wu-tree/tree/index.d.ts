export declare const defaultOption: {
    defaultCheckedKeys: any[];
    defaultExpandedKeys: any[];
    label: string;
    id: string;
    lineHeight: number;
    dataType: string;
    lazyLoad: boolean;
    selectType: string;
    checkDisabled: (d: any) => boolean;
    autoOpen: (d: any, level: any) => boolean;
    checkSticky: {
        on: string;
        off: string;
    };
    editNode: (d: any) => boolean;
    deleteNode: (d: any) => boolean;
    addChildNode: (d: any) => boolean;
};
export declare class Tree {
    readonly container: any;
    private option;
    private data;
    private flatList;
    private totalNum;
    private readonly flatListKeys;
    private topIndex;
    private bottomIndex;
    private readonly slidedownHTML;
    private readonly iconHTML;
    private readonly selectHTML;
    private clicked;
    private readonly checked;
    private resizeObserver;
    private index;
    private searchKeyword;
    private scrollDom;
    private openNumber;
    private seachKeys;
    private dom;
    private movedom;
    private calcCurrent;
    private searchKeysJson;
    private currentNumber;
    private clickFunc;
    private mouseoverFunc;
    private mousedownFunc;
    private mousemoveFunc;
    private scrollFunc;
    private mouseupFunc;
    private dblclickFunc;
    constructor(container: any, data: any, option: any);
    addResizeObserve(): void;
    init(): void;
    addMoveDom(): string;
    rendDom(): void;
    setScrollWidth(): void;
    private _rendHTML;
    private _rendOneNode;
    search(keyword: any, func: any, containChild: any): void;
    treeFindPath(tree: any, func: any, path: any[], result: any[], containChild: any, hasP?: any): any[];
    addEvent(): void;
    refreshDom(justScroll?: boolean, needLocate?: boolean): void;
    moveItem(el: any): void;
    renderOneTree(treeData: any, level: any, open: any): NodeListOf<ChildNode>;
    _getItemById(id: any): any;
    getMovePos($dom: any, e: any): any[];
    setNodesShow(node: any): void;
    setSelectKey(key: any, triggerClick: any, needLocate: any): void;
    clickLabelEvent($item: any, $t: any, e: any): void;
    radioEvent($t: any): void;
    checkEvent($t: any): void;
    delArrayFromArray(fromArray: any, delArray: any): any[];
    setCheckedKeys(keys: any, ...args: any[]): void;
    trigger(type: any, data: any, ...arg: any[]): void;
    setCheckedNodes(nodes: any): void;
    getChecked(): {
        nodes: any;
        keys: any;
    };
    checkAll(justResult: any): void;
    clearAll(): void;
    editNode(node: any): void;
    addNodes(id: any, nodes: any, open: any): void;
    _addOneNode(id: any, node: any, open?: any): void;
    addNode(id: any, node: any): void;
    insertAfter(insert_element: any, target_element: any): void;
    deleteNode(id: any): void;
    _deleteDomFromId(id: any): void;
    getFlatData(): void;
    _literalFlatTree(pNode: any, list: any, arry: any, arrykeys: any, level: any, dontSetData: any, list1?: any): void;
    getNodeById(id: any): any;
    _literalGetNode(list: any, id: any): any;
    openChildren(node: any): void;
    slideEvent($t: any): Promise<void>;
    findChildren(p: any, plevel: any): any;
    resetOption(option: any): void;
    replaceKey(text: any, keyword: any): any;
    destory(): void;
    revertListToTree(data: any): any;
    revertTreeToList(treedata: any): any[];
    _revertTreeToListFunc(treedata: any, list: any): void;
    getData(): any;
    returnFlatData(): {};
}
